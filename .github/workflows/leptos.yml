# Sample workflow for building and deploying a mdBook site to GitHub Pages
#
# To get started with mdBook see: https://rust-lang.github.io/mdBook/index.html
#
name: 部署页面（虽然我不看）

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: ubuntu-latest
    # env:
    steps:
      - uses: actions/checkout@v4
          # Install Rust Nightly Toolchain, with Clippy & Rustfmt
      - name: 安装夜更版（迫真）rust
        uses: dtolnay/rust-toolchain@nightly
        with:
            components: clippy, rustfmt
      - name: 添加WASM目标
        run: rustup target add wasm32-unknown-unknown
      - name: 安装trunk
        run: wget -qO- https://github.com/trunk-rs/trunk/releases/download/v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
      - name: 构建页面
        run: ./trunk build --release --public-url "${GITHUB_REPOSITORY#*/}"

      - name: 初始化Pages
        id: pages
        uses: actions/configure-pages@v4
      - name: 上传
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./dist

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: 部署到Github Pages
        id: deployment
        uses: actions/deploy-pages@v4

# name: Release to Github Pages

# on:
# push:
#     branches: [main]
# workflow_dispatch:

# permissions:
# contents: write # for committing to gh-pages branch.
# pages: write
# id-token: write

# # Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# # However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
# concurrency:
# group: "pages"
# cancel-in-progress: false

# jobs:
# Github-Pages-Release:

#     timeout-minutes: 10

#     environment:
#     name: github-pages
#     url: ${{ steps.deployment.outputs.page_url }}

#     runs-on: ubuntu-latest

#     steps:
#     - uses: actions/checkout@v4 # repo checkout

#     # Install Rust Nightly Toolchain, with Clippy & Rustfmt
#     - name: Install nightly Rust
#         uses: dtolnay/rust-toolchain@nightly
#         with:
#         components: clippy, rustfmt

#     - name: Add WASM target
#         run: rustup target add wasm32-unknown-unknown

#     - name: lint
#         run: cargo clippy & cargo fmt


#     # If using tailwind...
#     # - name: Download and install tailwindcss binary
#     #   run: npm install -D tailwindcss && npx tailwindcss -i <INPUT/PATH.css> -o <OUTPUT/PATH.css>  # run tailwind


#     - name: Download and install Trunk binary
#         run: wget -qO- https://github.com/trunk-rs/trunk/releases/download/v0.18.2/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-

#     - name: Build with Trunk
#         # "${GITHUB_REPOSITORY#*/}" evaluates into the name of the repository
#         # using --public-url something will allow trunk to modify all the href paths like from favicon.ico to repo_name/favicon.ico .
#         # this is necessary for github pages where the site is deployed to username.github.io/repo_name and all files must be requested
#         # relatively as favicon.ico. if we skip public-url option, the href paths will instead request username.github.io/favicon.ico which
#         # will obviously return error 404 not found.
#         run: ./trunk build --release --public-url "${GITHUB_REPOSITORY#*/}"


#     # Deploy to gh-pages branch
#     # - name: Deploy 🚀
#     #   uses: JamesIves/github-pages-deploy-action@v4
#     #   with:
#     #     folder: dist


#     # Deploy with Github Static Pages

#     - name: Setup Pages
#         uses: actions/configure-pages@v4
#         with:
#         enablement: true
#         # token:

#     - name: Upload artifact
#         uses: actions/upload-pages-artifact@v2
#         with:
#         # Upload dist dir
#         path: './dist'

#     - name: Deploy to GitHub Pages 🚀
#         id: deployment
#         uses: actions/deploy-pages@v3


        